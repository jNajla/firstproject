package com.example.appayn;

import java.util.ArrayList;
import java.util.List;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;

public class SearchByAddress extends Activity implements OnMarkerClickListener, LocationListener {
    
    Context context;
    Geocoder geocoder = null;
    private GoogleMap gMap;
    LatLng maposition;
    MapManager mm;
    
    List<LatLng> listePOI;
    LatLng center;
    EditText locale;
    String locationName;
    // The minimum distance to change Updates in meters
    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 0; // 0 meters
    
    // The minimum time between updates in milliseconds
    private static final long MIN_TIME_BW_UPDATES = 0;// 1000 * 0 * 1; // 1 minute
    Location location;
    LocationManager locationManager;
    
    @SuppressLint("NewApi")
    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.searchbyadress);
        locale = (EditText) findViewById(R.id.location);
        gMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        final Location lastpos = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        if (lastpos != null) {
            Log.v("test", "log 11");
            center = new LatLng(lastpos.getLatitude(), lastpos.getLongitude());
        } else {
            Log.v("test", "toto");
            Log.v("test", "log 12");
            center = new LatLng(36.81808, 10.165733);
        }
        Log.v("test", "log 2");
        gMap.moveCamera(CameraUpdateFactory.newLatLngZoom(center, 10));
        Log.v("test", "log 3");
        itenirairebyadress();
        Log.v("test", "log 4");
        gMap.setOnMarkerClickListener(this);
        
        mm = new MapManager();
    }
    
    public void itenirairebyadress() {
        // final GeoPoint pt = new GeoPoint(lat, lng);
        final Button geoBtn = (Button) findViewById(R.id.geocodeBtn);
        
        geocoder = new Geocoder(this);
        
        geoBtn.setOnClickListener(new OnClickListener() {
            
            @Override
            public void onClick(final View v) {
                if (startGPS()) {
                    Log.v("test", "search");
                    String motCle;
                    try {
                        // Log.v("test", "search");
                        // hide keyboard
                        final InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                        imm.hideSoftInputFromWindow(((EditText) findViewById(R.id.location)).getWindowToken(), 0);
                        locationName = ((EditText) findViewById(R.id.location)).getText().toString();
                        
                        // Log.v("test", "location name=  " + locationName);
                        final List<Address> addressList = geocoder.getFromLocationName(locationName, 5);
                        if (addressList != null && addressList.size() > 0) {
                            /* final TextView pozycja = (TextView) findViewById(R.id.position);
                             pozycja.setText("lat: " + addressList.get(0).getLatitude() + " lng: "
                                             + addressList.get(0).getLongitude());
                             */
                            locale.setError(null);
                            // position source
                            Log.v("test", "location getLatitude=  " + addressList.get(0).getLatitude());
                            Log.v("test", "location getLongitude=  " + addressList.get(0).getLongitude());
                            maposition = new LatLng(addressList.get(0).getLatitude(), addressList.get(0).getLongitude());
                            gMap.moveCamera(CameraUpdateFactory.newLatLng(maposition));
                            
                            // Zoom in the Google Map
                            gMap.animateCamera(CameraUpdateFactory.zoomTo(15));
                            
                            // get mots cl√©s
                            motCle = extractStringFromActivity(getIntent(), "POI");
                            
                            // recuperer la liste des POI
                            listePOI = searchPOI(motCle, maposition);
                            
                            // Ajouter ma position dans la liste
                            addMyPositionToList(listePOI, maposition);
                            
                            // dessiner les points sur la carte
                            mm.drawPOIOnMap(gMap, listePOI);
                            
                            // new ItineraireTask(SearchByAddress.this, gMap, maposition, editArrivee).execute();
                            
                        }
                    } catch (final Exception e) {
                        e.printStackTrace();
                        Log.v("test", "erreur");
                        
                        locale.setError("adresse incorrecte");
                    }
                }
            }
            
        });
    }
    
    // gps
    private boolean startGPS() {
        
        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        final boolean enabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
        // si le gps est active
        if (enabled) {
            if (location == null) {
                locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, MIN_TIME_BW_UPDATES,
                                                       MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                Log.v("test", " GPS updating ...");
                
            }
            final boolean enabled2 = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
            if (enabled2) {
                if (location == null) {
                    locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MIN_TIME_BW_UPDATES,
                                                           MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                    Log.v("test", " Network updating ...");
                }
            }
            return true;
        } else {
            /* Alert Dialog Code Start*/
            final AlertDialog.Builder alert = new AlertDialog.Builder(this);
            alert.setTitle("Start GPS"); // Set Alert dialog title here
            alert.setMessage("Le GPS est desactive!! Voulez vous l'activer?"); // Message here
            
            alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(final DialogInterface dialog, final int whichButton) {
                    
                    startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));
                    
                }
            });
            
            alert.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(final DialogInterface dialog, final int whichButton) {
                    
                    // Canceled.
                    dialog.cancel();
                    
                }
            });
            final AlertDialog alertDialog = alert.create();
            alertDialog.show();
            
            return false;
        }
    }
    
    public void addMyPositionToList(final List<LatLng> mylist, final LatLng myPosition) {
        mylist.add(myPosition);
    }
    
    public String extractStringFromActivity(final Intent intent, final String extratName) {
        final Bundle bundle = intent.getExtras();
        return bundle.getString(extratName);
    }
    
    public List<LatLng> searchPOI(final String motCle, final LatLng maposition) {
        
        final List<LatLng> listePOI = new ArrayList<LatLng>();
        
        // parse mots cle TODO
        
        // envoyer la requete de recherche vers le serveur
        
        // analyser la reponse et recuperer la liste de
        
        // valeurs statiques pour test
        final LatLng poi1 = new LatLng(35.570494, 10.820332);
        final LatLng poi2 = new LatLng(35.633581, 10.756962);
        final LatLng poi3 = new LatLng(35.681597, 10.728229);
        listePOI.add(poi1);
        listePOI.add(poi2);
        listePOI.add(poi3);
        
        return listePOI;
    }
    
    public void iteniraire(final LatLng poi) {
        new ItineraireTask(this, gMap, maposition, poi).execute();
    }
    
    @Override
    public boolean onMarkerClick(final Marker dest) {
        /* Alert Dialog Code Start*/
        final AlertDialog.Builder alert = new AlertDialog.Builder(this);
        alert.setTitle("veuillez choisir votre destination"); // Set Alert dialog title here
        alert.setMessage("voulez vous confirmer?"); // Message here
        
        alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(final DialogInterface dialog, final int whichButton) {
                
                final LatLng poi = dest.getPosition();
                gMap.clear();
                mm.drawPOIOnMap(gMap, listePOI);
                iteniraire(poi);
                
            }
        });
        
        alert.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(final DialogInterface dialog, final int whichButton) {
                
                // Canceled.
                dialog.cancel();
                
            }
        });
        final AlertDialog alertDialog = alert.create();
        alertDialog.show();
        
        return false;
    }
    
    @Override
    public void onLocationChanged(final Location location) {
        // TODO Auto-generated method stub
        
    }
    
    @Override
    public void onProviderDisabled(final String provider) {
        // TODO Auto-generated method stub
        
    }
    
    @Override
    public void onProviderEnabled(final String provider) {
        // TODO Auto-generated method stub
        
    }
    
    @Override
    public void onStatusChanged(final String provider, final int status, final Bundle extras) {
        // TODO Auto-generated method stub
        
    }
}
